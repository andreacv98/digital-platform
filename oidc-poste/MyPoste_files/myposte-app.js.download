


var app = angular.module('MyPoste', ['ui.router', 'ngResource', 'ui.bootstrap', 'ngCookies', 'ngStorage', 'ngSanitize', 'SessionStorage', 'LocalStorage', 'angularCroppie', 'directive.loading', 'posteModalModule', 'ngLoadingSpinner', 'mapApplication', 'angularUtils.directives.dirPagination', 'ngMessages', 'ngAnimate', 'gestoreAtteseApp']);
var appuntamento = app;
var appContext = "/appuntamento";

function stickySpallaDestra() {
	console.log('sticky');
	$('#bracket').hcSticky({
		followScroll: false,
		stickTo: stLi,
		offResolutions: -992,
		top: stickFromTop
	});
}

function bindTendinaMenu() {
	$('.dropdown-windowbox-target').each(function () {
		var that = $(this);
		$(this).find('ul a').click(function () {
			that.removeClass('open');
		});
	});
}

$(window).load(function () {
	bindTendinaMenu();
})

app.config(function ($stateProvider, $urlRouterProvider, $httpProvider) {

	$httpProvider.defaults.headers.common = {};
	$httpProvider.defaults.headers.post = {};
	$httpProvider.defaults.headers.put = {};
	$httpProvider.defaults.headers.patch = {};
	$httpProvider.defaults.withCredentials = true;

	$urlRouterProvider.otherwise("/cruscotto");

	$stateProvider
		.state('cruscotto', {
			url: "/cruscotto",
			templateUrl: "/myposte/views/cruscotto.html",
			controller: "CruscottoController"
		})
		.state('prenota-appuntamento', {
			url: "/appuntamento",
			views: {
				'': { templateUrl: '/myposte/views/prenota-appuntamento.html' }
			},
			redirectTo: 'prenota-appuntamento.appuntamento'
		})
		.state('prenota-appuntamento.appuntamento', {
			url: "/storico-appuntamenti",
			parent: "prenota-appuntamento",
			views: {
				'': { templateUrl: '/myposte/partials/appuntamento/storico-appuntamento.html', controller: "StoricoAppuntamentoController"  }
			}
		})
		.state('bacheca', {
			url: "/bacheca",
			params: {
				savedParams: null,
				bucket: null
			},
			templateUrl: "/myposte/views/bacheca.html",
			controller: "bachecaController"
		})
		.state('bacheca.message', {
			url: "/message/:idMessage",
			params: {
				acr: null,
			},
			templateUrl: "/myposte/views/bacheca-messaggio.html",
			controller: "bachecaController"
		})
		.state('profilo', {
			url: "/profilo",
			views: {
				'': { templateUrl: '/myposte/views/profilo.html' }
			},
			redirectTo: 'profilo.datiPersonali'
		})
		.state('profilo.datiPersonali.indirizzi', {
			url: "/indirizzi?ref",
			parent: "profilo.datiPersonali",
			views: {
				'': { templateUrl: '/myposte/partials/profilo/profilo-dati_personali_form_indirizzi.html' }
			}
		})
		.state('profilo.sicurezza', {
			url: "/sicurezza",
			parent: "profilo",
			views: {
				'': { templateUrl: '/myposte/partials/profilo/profilo-sicurezza.html', controller: "ProfiloSicurezzaController" }
			}
		})
		.state('profilo.privacy', {
			url: "/privacy",
			parent: "profilo",
			views: {
				'': { templateUrl: '/myposte/partials/profilo/profilo-privacy.html', controller: "ProfiloPrivacyController" }
			}
		})
		.state('storico', {
			url: "/storico",
			views: {
				'': { templateUrl: '/appuntamento/pages/storico-appuntamenti.html' }
			}
		})
		.state('riepilogo', {
			url: "/riepilogo",
			views: {
				'': { templateUrl: '/appuntamento/pages/riepilogo-appuntamento.html' }
			}
		})
		.state('conferma', {
			url: "/conferma",
			views: {
				'': { templateUrl: '/appuntamento/pages/conferma-appuntamento.html' }
			}
		})
		.state('modifica', {
			url: "/modifica",
			views: {
				'': { templateUrl: '/appuntamento/pages/appuntamento-form.html' }
			}
		})
		.state('disdettaAppuntamento', {
			url: "/disdettaAppuntamento",
			views: {
				'': { templateUrl: '/appuntamento/pages/disdetta-appuntamento.html' }
			}
		})

})
	.service('authInterceptor', function ($q, $timeout, $injector, SessionStorageService, config, $rootScope) {
		var service = this;

		service.promptLogin = function (loa3, prompt, redirectUrl, cancelRedirectUrl) {
			$rootScope.rootShowLoading = true;
			var promptParam = 'login';
			if (prompt) {
				promptParam = prompt;
			}
			var redirectUrlParam = window.location.href;
			if (redirectUrl) {
				redirectUrlParam = redirectUrl;
			}
			

			var data = {
				"prompt": promptParam,
				"redirectUrl": redirectUrlParam
			};
			if (loa3) {
				data.loa = config.loa3_url;
			}
			if(cancelRedirectUrl){
				data.cancelRedirectUrl = cancelRedirectUrl;
			}
			var $http = $injector.get('$http');
			$http({
				method: 'POST',
				url: config.v2_sp_url + '/create-az-request',
				headers: {
					'Content-Type': 'application/json;charset=UTF-8'
				},
				data: data
			}).then(function (response) {
				var $form = $('<form action="' + response.data.risultato.idpaz + '" method="POST"></form>');
				$form.append('<input type="hidden" name="request" value="' + response.data.risultato.client_assertion + '">');
				$form.append('<input type="hidden" name="state" value="' + response.data.risultato.state + '">');
				$form.append('<input type="hidden" name="response_type" value="code">');
				$form.append('<input type="hidden" name="code_challenge_method" value="S256">');
				$form.append('<input type="hidden" name="code_challenge" value="' + response.data.risultato.code_challenge + '">');
				$form.appendTo('body');
				$form.submit();
			},
				function (err) {
					$rootScope.rootShowLoading = false;
					$state.go('error');
				});
		},

			service.reforge = function ($injector, config, response) {
				var $http = $injector.get('$http');
				var defer = $q.defer();
				var promiseSession = defer.promise;
				$http({
					method: 'GET',
					url: config.profilo_ws_url + 'authorization/forge'
				}).then(function (data) {
					defer.resolve();
				}, function (data) {
					defer.reject();
				});
				var promiseUpdate = promiseSession.then(function () {
					return $http(response.config);
				});
				return promiseUpdate;
			}

		service.request = function (request) {
			if (request.url.indexOf(config.profilo_ws_url) === 0) {
				request.headers['X-authorization'] = SessionStorageService.get('xauth');
				request.headers['X-access-token'] = SessionStorageService.get('access_token');
			}
			if (request.url.indexOf(config.profilo_ws_url + "basicretail") === 0) {
				request.headers['X-access-token'] = SessionStorageService.get('xtoken');
				console.log("access-token = xtoken");
			}
			if (request.url.indexOf(config.bacheca_ws_url) === 0) {
				request.headers['Authorization'] = 'Bearer ' + SessionStorageService.get('xtoken');
				if($rootScope.userIsPrivate){
					request.headers['X-BCACHE'] = 'false';
				}
			}
			if (request.url.indexOf(config.appuntamento_url) === 0) {
				// request.headers['X-authorization'] = SessionStorageService.get('access_token');
				request.headers['Authorization'] = 'Bearer ' + SessionStorageService.get('xtoken');
				request.headers['Content-Type'] = 'application/json';
			}
			return request;
		};

		service.response = function (response) {
			if (response.config.url.indexOf(config.profilo_ws_url) === 0) {
				xauth = response.headers('X-authorization');
				if (xauth) {
					SessionStorageService.set('xauth', xauth);
				}
			}
			$timeout(stickySpallaDestra, 500);
			return response;
		};

		service.responseError = function (response) {
			if (response.config.url.indexOf(config.profilo_ws_url) === 0) {
				if (response.status == 401) {
					if (response.data.errors[0].name == 'credentials' && response.data.errors[0].message == 'not_valid') {
						service.promptLogin(false);
					}

					if (response.data.errors[0].name == 'csrf-auth' && response.data.errors[0].message == 'not_valid') {
						return service.reforge($injector, config, response);
					}
				}
				xauth = response.headers('X-authorization');
				if (xauth) {
					SessionStorageService.set('xauth', xauth);
				}
			}

			if (response.config.url.indexOf(config.bacheca_ws_url) === 0) {
				if (response.status == 400) {
					console.log("errore bacheca 400");
				}
				if (response.status == 401) {
					console.log("errore bacheca 401");
				}
				if (response.status == 403) {
					console.log("errore bacheca 403");
				}
			}
			$timeout(stickySpallaDestra, 500);
			return $q.reject(response);
		};
	})
	.config(['$httpProvider', '$resourceProvider', function ($httpProvider, $resourceProvider) {
		//$resourceProvider.defaults.stripTrailingSlashes = false;
		$httpProvider.interceptors.push('authInterceptor');
		$httpProvider.interceptors.push('gaAuthInterceptor');
		//initialize get if not there
		if (!$httpProvider.defaults.headers.get) {
			$httpProvider.defaults.headers.get = {};
		}
		//disable IE ajax request caching
		$httpProvider.defaults.headers.get['If-Modified-Since'] = 'Mon, 26 Jul 1997 05:00:00 GMT';
		// extra
		$httpProvider.defaults.headers.get['Cache-Control'] = 'no-cache';
		$httpProvider.defaults.headers.get['Pragma'] = 'no-cache';

		if (!$httpProvider.defaults.headers.post) {
			$httpProvider.defaults.headers.post = {};
		}
		//disable IE ajax request caching
		$httpProvider.defaults.headers.post['If-Modified-Since'] = 'Mon, 26 Jul 1997 05:00:00 GMT';
		// extra
		$httpProvider.defaults.headers.post['Cache-Control'] = 'no-cache';
		$httpProvider.defaults.headers.post['Pragma'] = 'no-cache';
	}])
	.config(function ($locationProvider, $sceDelegateProvider) {
		$locationProvider.html5Mode({
			//enabled: false,
			requireBase: false
		});

		$sceDelegateProvider.resourceUrlWhitelist([
			// Allow same origin resource loads.
			'self',
			// Allow loading from our assets domain.  Notice the difference between * and **.
			'https://www.geocms.it/**'
		]);
	});

app.run(
	function ($rootScope, $state, $stateParams, $window, $timeout, modelService, profiloService, restService, errorMessages, viewModelService, bachecaService, config, cruscottoService, dcsMultiTrackService, ListTicketService, ForgeService, gaConfig, $http, SessionStorageService, authInterceptor, $cookies) {
		$rootScope.myposteForged = false;
		// Trigger cambio stato profilo
		$rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState) {
			if ($rootScope.dcsTrack) {
				if (toState.name == 'bacheca') {
					dcsMultiTrackService.trackBacheca();
				}
				if (toState.name == 'prenota-appuntamento') {
					dcsMultiTrackService.trackAppuntamenti();
				}
			}
			$rootScope.dcsTrack = true;
			if (toState.redirectTo) {
				event.preventDefault();
				$state.go(toState.redirectTo, toParams);
			}
			$rootScope.responseSuccess = false;
			$rootScope.serverErrorSingolo = false;
			$rootScope.serverErrorMultiplo = false;
			$rootScope.rootisuserlock = false;
			$rootScope.rootusernomobile = false;

			if ($rootScope.forceSuccess) {
				$rootScope.forceSuccess = false;
				$rootScope.responseSuccess = true;
				$rootScope.successMessage = "Operazione effettuata con successo";
			}

			if (toState.name == 'bacheca.message') {
				if (toParams.acr && toParams.acr == config.loa3_url && (!$rootScope.userClaims || $rootScope.userClaims.loa != config.loa3_url)) {
					event.preventDefault();
					var returnUrl = window.location.protocol + "//" + window.location.hostname + window.location.pathname + $state.href('bacheca.message', { idMessage: toParams.idMessage });
					var cancelReturnUrl = window.location.protocol + "//" + window.location.hostname + window.location.pathname + $state.href('bacheca');
					authInterceptor.promptLogin(true, "login", returnUrl, cancelReturnUrl);
					return;
				}
			}

		});

		//Inietto servizi e dipendenze che condivido con i controller.
		$rootScope.$state = $state;
		$rootScope.$stateParams = $stateParams;
		$rootScope.bachecaService = bachecaService;
		$rootScope.errorMessages = errorMessages;
		$rootScope.viewModelService = viewModelService;
		$rootScope.profiloService = profiloService;
		$rootScope.Model = {};

		if (__loa2session && __loa2session == true) {
			$http({
				method: 'GET',
				url: config.v2_sp_url + '/check-session?nocache='+new Date().getTime(),
			}).then(function (response) {
				console.log(response);
				if (response.status == 200 && response.data && response.data.risultato && response.data.risultato.access_token) {
					SessionStorageService.set('access_token', response.data.risultato.access_token);
					if (response.data.risultato.xtoken) {
						SessionStorageService.set('xtoken', response.data.risultato.xtoken);
					}

					var userClaims = (response.data.risultato && response.data.risultato.claims) ? response.data.risultato.claims : {};
					$rootScope.userClaims = userClaims;

					$rootScope.migInfo = {

						"retail" : (response.data.risultato && response.data.risultato.retail_user_to_migrate) ? true : false,
						"spid"	: (response.data.risultato && response.data.risultato.spid_user_to_migrate) ? true : false
					}

					// cpit - Handled by blocking modal on retail (not on spid).
					var noskipmig = SessionStorageService.get('noskipmig');
					if (
						(noskipmig && noskipmig == userClaims.userid // Without cpit ...
								&& !(typeof myposte_config !== 'undefined' && myposte_config.showNewHeader)) // ...
						|| (noskipmig && noskipmig == userClaims.userid && $rootScope.migInfo.spid // With cpit ...
									&& typeof myposte_config !== 'undefined' && myposte_config.showNewHeader)) { // ...
						SessionStorageService.clear();
						SessionStorageService.set('noskipmig', noskipmig);
						window.location.href = config.migraPosteIt;
					} else {
						SessionStorageService.remove('noskipmig');
						$rootScope.limitLastMessages = config.countLastMessages;
						$rootScope.bachecaContorno();

						profiloService.forge(function (data) {
							loadProfilo();
							loadTicket();
							loadOffering();
							$rootScope.getOfferingMessage();
						});

						/*

						if (typeof myposte_config !== 'undefined' && myposte_config.showNewHeader) { // Moved inside loadProfilo.
							// cpit - get alert message.
							profiloService.getalertmessage(function (data) {
								var alertMessage = data.responseObject.message;
								SessionStorageService.set('alertMessage', alertMessage);
								$rootScope.alertMessage = alertMessage;
							});

							// cpit - get profile details.
							if (!$rootScope.briefProfile) {
								profiloService.getbriefprofile(function (data) {
									if (data && data.responseObject && data.responseObject.briefProfile) {
										var briefProfile = data.responseObject.briefProfile;
										SessionStorageService.set('briefProfile', briefProfile);
										$rootScope.briefProfile = briefProfile;
									}
								});
							}
							$rootScope.showNewHeader = true;
						}

						*/

					}
				} else {
					authInterceptor.promptLogin(false);
				}
			}, function (errResponse) {
				console.log(errResponse);
			});
		}
		else {
			authInterceptor.promptLogin(false);
		}

		var loadTicket = function () {
			var lastTicket = false;
			var upLastTicket = false;
			ForgeService.forge(function (data) {
				ListTicketService.list({}, function (result) {
					if (result.tickets.length) {
						var curDate = moment().format("YYYYMMDDHHmmss");
						for (var i in result.tickets) {
							// 0 -> ID
							// 1 -> CODICE 
							// 2 -> FRAZIONARIO
							// 3 -> DATA
							// 4 -> CODICE BO
							ticket = result.tickets[i]["TICKET_DATA"].split("|");

							if (ticket[3] > curDate) {
								if (!lastTicket) {
									lastTicket = ticket;
								}
								else {
									if (ticket[3] < lastTicket[3]) {
										lastTicket = ticket;
									}
								}
							}
						}
						if (lastTicket) {
							$http.jsonp(gaConfig.urls.geocms.replace(':frazionario:', ticket[2]))
								.success(function (response) {
									if (response.status.message == 'OK') {
										if (response.layers && response.layers[0]
											&& response.layers[0].objects && response.layers[0].objects[0]
											&& response.layers[0].objects[0].data && response.layers[0].objects[0].data.main) {
											upLastTicket = response.layers[0].objects[0].data.main;
											$rootScope.$broadcast('last-ticket', { lastTicket: lastTicket, upLastTicket: upLastTicket });
										}
										else {
											return;
										}
									}
									else {
										return;
									}
								});
							var qrcode = new QRCode("qrcode", {
								text: lastTicket.join('|'),
								width: 170,
								height: 170
							});
						}
						stickySpallaDestra();
					}

				});
			});
		}

		var hideAccountNumber = function(accountNumber, digitToLimit) {
			var accountNumberToDisplay = "";
			if (accountNumber.length <= 4) {
				accountNumberToDisplay = accountNumber;
			}
			else {
				accountNumberToDisplay = "****" + accountNumber.substring(accountNumber.length - digitToLimit, accountNumber.length);
			}
			return accountNumberToDisplay;

		};

		var loadBiscotti = function () {
			$rootScope.biscottiUtente = [];

			profiloService.possesso(function (data) {
				if (data.valid && data.responseObject) {
					var prodotti = data.responseObject;
					if (prodotti['Bancoposta']) {
						for (var i in prodotti['Bancoposta']) {
							$rootScope.biscottiUtente.push({
								tipo: "Conto Bancoposta",
								rapporto: 'N° ' + prodotti['Bancoposta'][i],
								url: config.biscotti_url.bancoposta,
								title: "Accedi al conto",
								label: "Accedi"
							});
						}
					}
					if (prodotti['BancopostaNoOnline']) {
						for (var i in prodotti['BancopostaNoOnline']) {
							$rootScope.biscottiUtente.push({
								tipo: "Conto Bancoposta",
								rapporto: 'N° ' + prodotti['BancopostaNoOnline'][i],
								url: config.biscotti_url.bancoposta,
								title: "Accedi al conto",
								label: "Accedi"
							});
						}
					}
					if (prodotti['BancopostaClick']) {
						for (var i in prodotti['BancopostaClick']) {
							$rootScope.biscottiUtente.push({
								tipo: "Conto Bancoposta",
								rapporto: 'N° ' + prodotti['BancopostaClick'][i],
								url: config.biscotti_url.bancoposta_click,
								title: "Accedi al conto",
								label: "Accedi"
							});
						}
					}
					/*if (prodotti['PostepayEvo']) {
						for (var i in prodotti['PostepayEvo']) {
							$rootScope.biscottiUtente.push({
								tipo: "Postepay Evolution",
								rapporto: 'N° ' + prodotti['PostepayEvo'][i],
								url: config.biscotti_url.postepay_evo,
								title: "Accedi",
								label: "Accedi"
							});
						}
					}*/
					$rootScope.possesso = {
						bancoposta: (!!prodotti['Bancoposta'] && !!prodotti['Bancoposta'].length > 0) || (!!prodotti['BancopostaClick'] && !!prodotti['BancopostaClick'].length > 0),
						postepay: (!!prodotti['PostepayStd'] && !!prodotti['PostepayStd'].length > 0) || (!!prodotti['PostepayEvo'] && !!prodotti['PostepayEvo'].length > 0) || !!prodotti['PostepayDebit']
					}
					if ($rootScope.possesso.postepay) {
						// for (var i in prodotti['PostepayStd']) {
							$rootScope.biscottiUtente.push({
								tipo: "Postepay",
								//rapporto: 'N° ' + prodotti['PostepayStd'][i],
								rapporto:"Le tue carte",
								url: config.biscotti_url.postepay,
								title: "Accedi",
								label: "Accedi"
							});
						//}
					}
					// biscotto prodotto poste energia
					if(prodotti['NumeroPreventiviEnergy'] && !isNaN(prodotti['NumeroPreventiviEnergy']) && prodotti['NumeroPreventiviEnergy'] > 0) {
						var prevSosp = prodotti['NumeroPreventiviEnergy'] == 1 ?  ' preventivo in sospeso': ' preventivi in sospeso';
						$rootScope.biscottiUtente.push({
							tipo: "Poste Energia",
							rapporto: 'Hai ' + prodotti['NumeroPreventiviEnergy']+prevSosp,
							url: config.biscotti_url.energy,
							title: "Accedi",
							label: "Accedi"
						});
					}
					else {
						if (prodotti['Energy']) {
							$rootScope.biscottiUtente.push({
								tipo: "Poste Energia",
								rapporto: 'Monitora e gestisci le forniture',
								url: config.biscotti_url.energy,
								title: "Accedi",
								label: "Accedi"
							});
						}
					}
					var rpol = {};
					if (prodotti['Libretto']) {
						$rootScope.possesso.libretto = true;
						rpol = {
							tipo: 'Risparmio <br class="hidden-sm hidden-xs"/> Postale',
							tipoEsteso: true,
							rapporto: "I tuoi Libretti",
							url: config.biscotti_url.rpol,
							title: "Accedi",
							label: "Accedi"
						};
					}
					if (prodotti['Buono']) {
						$rootScope.possesso.buono = true;
						if (prodotti['Libretto']) {
							rpol.rapporto = "I tuoi Buoni e Libretti"
						}
						else {
							rpol = {
								tipo: 'Risparmio <br class="hidden-sm hidden-xs"/> Postale',
								tipoEsteso: true,
								rapporto: "I tuoi Buoni",
								url: config.biscotti_url.rpol,
								title: "Accedi",
								label: "Accedi"
							};
						}
					}
					if (prodotti['Libretto'] || prodotti['Buono']) {
						$rootScope.biscottiUtente.push(rpol);
					}
					if (prodotti['Postevita']) {
						$rootScope.possesso.postevita = true;
						$rootScope.biscottiUtente.push({
							tipo: "Assicurazioni",
							rapporto: "La tua posizione assicurativa",
							url: config.biscotti_url.pos_assicurativa,
							title: "Accedi",
							label: "Accedi"
						});
					}
					if (prodotti['SPID']) {
						$rootScope.possesso.spid = true;
						$rootScope.biscottiUtente.push({
							tipo: "PosteID",
							rapporto: "Gestisci la tua identità digitale",
							url: config.biscotti_url.spid,
							title: "Accedi",
							label: "Accedi"
						});
					}
					if (prodotti['StatoInesitate']) {
						$rootScope.possesso.servizioInesitate = true;
						if (prodotti['NumeroInesitate']) {
							$rootScope.possesso.numeroInesitate = prodotti['NumeroInesitate'];
						}
						else {
							$rootScope.possesso.numeroInesitate = '0';
						}
						$rootScope.biscottiUtente.push({
							tipo: "Ritiro Digitale",
							rapporto: "Hai " + $rootScope.possesso.numeroInesitate + " raccomandat" + ($rootScope.possesso.numeroInesitate == 1 ? "a" : "e") + " in giacenza",
							url: config.biscotti_url.inesitate,
							title: "Accedi",
							label: "Accedi"
						});
					}
					if (prodotti['PEC']) {
						$rootScope.possesso.pec = true;
					}
					if (prodotti['GED']) {
						$rootScope.possesso.ged = true;
					}
					if (prodotti['PPS']) {
						$rootScope.possesso.pps = true;
						$rootScope.biscottiUtente.push({
							tipo: "Punto Poste Da Te",
							rapporto: "Hai attivato il servizio",
							url: config.biscotti_url.digitalpost,
							title: "Gestisci",
							label: "Gestisci"
						});
					}
					
					if (prodotti['FIBRA']) {
						$rootScope.possesso.pps = true;
						$rootScope.biscottiUtente.push({
							tipo: "Postecasa  ultraveloce",
							rapporto: "Gestisci la tua offerta",
							url: config.biscotti_url.fibra_url,
							title: "Accedi",
							label: "Accedi"
						});
					}
	
	
					if ($rootScope.userIsPrivate) {
						$rootScope.biscottiUtente.push({
							tipo: 'POSTE PREMIUM',
							rapporto: "Sintesi prodotti",
							url: config.biscotti_url.private,
							title: "Accedi",
							label: "Accedi"
						});
					} else {
						if (prodotti['Patrimonio']) {
							$rootScope.possesso.patrimonio = true;
							$rootScope.biscottiUtente.push({
								tipo: 'Il tuo <br class="hidden-sm hidden-xs"/> Patrimonio',
								rapporto: "Sintesi prodotti",
								//url: config.biscotti_url.patrimonio,
								click: "modalPatrimonio",
								title: "Accedi",
								label: "Accedi"
							});
						}
					}
	
	//				if (prodotti['Finanziamento']) {
	//					$rootScope.possesso.finanziamento = true;
	//					$rootScope.biscottiUtente.push({
	//						tipo: 'I tuoi <br class="hidden-sm hidden-xs"/> finanziamenti',
	//						rapporto: "Sintesi prodotti",
	//						url: config.biscotti_url.finanziamenti,
	//						title: "Accedi",
	//						label: "Accedi"
	//					});
	//				}
	
					if (prodotti['NativoSpid']) {
						$rootScope.possesso.nativoSpid = true;
					}
					if (prodotti['DipendentePoste']) {
						$rootScope.possesso.dipendentePoste = true;
					}
					if (prodotti['Consulenti'] && prodotti['Consulenti'][0]) {
						$rootScope.infoConsulente = prodotti['Consulenti'][0];
						if($rootScope.infoConsulente && $rootScope.infoConsulente.telefonoMobile){
							$rootScope.infoConsulente.telefonoMobile = $rootScope.infoConsulente.telefonoMobile.replace(/-/g, '');
						}
					}
					if (prodotti['StatoPratica'] && !angular.equals({}, prodotti['StatoPratica'])) {
						$rootScope.possesso.pratica = prodotti['StatoPratica'];
					}
					if (prodotti['PrestitiOnline']) {
						$rootScope.biscottiUtente.push({
							tipo: "Prestito Bancoposta Online",
							rapporto: "I tuoi prestiti",
							url: config.biscotti_url.prestiti_online,
							title: "Accedi",
							label: "Accedi"
						});
					}

					profiloService.getinfouserprivate(function (data) {
						if (data.valid && data.responseObject && data.responseObject.userPrivate) {
					 		$rootScope.userIsPrivate = data.responseObject.userPrivate.userPrivate;

							if (!$rootScope.userIsPrivate) {
								$("#card-prendi-appuntamento").show();
							}

					 		if ($rootScope.userIsPrivate && $rootScope.biscottiUtente) {
								$rootScope.biscottiUtente.push({
									tipo: 'POSTE PREMIUM',
									rapporto: "Sintesi prodotti",
									url: config.biscotti_url.private,
									title: "Accedi",
									label: "Accedi"
								});
	
								$rootScope.biscottiUtente = $rootScope.biscottiUtente.filter(function(biscotto) {
									return biscotto.tipo.indexOf('Patrimonio') === -1;
								});
	
							}
					 	}

						profiloService.retrievedetailedaccountlist({type: "CC", status: "A"},
							function(data) {
								if (data.valid && data.responseObject) {

									var contiCorrenti = data.responseObject;
									var biscottiCCAbilitatiBPOL = [];
									var biscottiCCDaAbilitareBPOL = [];

									angular.forEach(contiCorrenti, function (cc) {

										if (cc['statoRapp'] && cc['statoRapp'] === 'A'
											&& cc['flagPienaOperativita']
											&& cc['flagPienaOperativita'] === 'S'
											&& cc['abilitazioneBPOL'] ) {
										switch (cc['abilitazioneBPOL']) {
											case 'S': //abilitato BPOL
												biscottiCCAbilitatiBPOL.push({

													tipo: "Conto Bancoposta",
													rapporto: 'N° ' + hideAccountNumber(cc.numero, 4),
													url: config.biscotti_url.bancoposta,
													title: "Accedi al conto",
													label: "Accedi"
												});
												break;
											case 'R': //abilitazione BPOL richiesta
												biscottiCCDaAbilitareBPOL.push({
													tipo: "Conto Bancoposta",
													rapporto: 'N° ' + hideAccountNumber(cc.numero, 4),
													numero: cc.numero,
													click: "abilitazioneBPOL",
													//	url: config.biscotti_url.bancoposta,
													title: "Attiva",
													label: "Attiva"
												});
												break;
											default:
												//case 'N' abilitazione BPOL assente
												break;
										}
									}
									});

									if (biscottiCCAbilitatiBPOL.length > 0) {
										$rootScope.possesso.bancoposta = true;

										//filtro prodotti bancoposta provenienti da possesso
										$rootScope.biscottiUtente = $rootScope.biscottiUtente.filter(function(biscotto) {
											return biscotto.tipo.indexOf('Conto Bancoposta') === -1;
										});

										// aggiungere in cima le card relative ai prodotti bancoposta abilitati
										$rootScope.biscottiUtente = biscottiCCAbilitatiBPOL.concat($rootScope.biscottiUtente);
									}
									// aggiungere in cima le card relative ai prodotti bancoposta da abilitare
									$rootScope.biscottiUtente = biscottiCCDaAbilitareBPOL.concat($rootScope.biscottiUtente);
								}

								$rootScope.$broadcast('myposte-forged');
								$rootScope.myposteForged = true;
							},
							function(error){
								console.log("errore retrievedetailedaccountlist", error);
								$rootScope.serverErrorSingolo = true;
								$rootScope.serverError = errorMessages.dataUnavaiable.message;
								$rootScope.$broadcast('myposte-forged');
								$rootScope.myposteForged = true;
							});


					}, function (err) {
				 		$rootScope.serverErrorSingolo = true;
				 		$rootScope.serverError = errorMessages.dataUnavaiable.message;
				 		$rootScope.$broadcast('myposte-forged');
				 		$rootScope.myposteForged = true;
				 	});
				}
			}, function (err) {
		 		$rootScope.serverErrorSingolo = true;
		 		$rootScope.serverError = errorMessages.dataUnavaiable.message;
		 		$rootScope.$broadcast('myposte-forged');
		 		$rootScope.myposteForged = true;
		 	});

		}

		var loadProfilo = function () {
			
//			profiloService.fromposteid(function (data) {
//				$rootScope.fromPosteId = data.responseObject.fromPosteId;
				profiloService.getuserroles(function (data) {
					$rootScope.userroles = data.responseObject;
					$timeout(profiloService.getfullvitalstatistics(function (data) {
						$rootScope.Model.profilo = data.responseObject;
						if (!$rootScope.Model.profilo.fullVitalStatistics) {
							$rootScope.Model.profilo.fullVitalStatistics = {
								vitalStatistics: {},
								contacts: {},
								addresses: [],
								userOccupation: {},
								userEducationalQualification: {}
							}
						}
						$rootScope.welcome = ($rootScope.Model.profilo.fullVitalStatistics.vitalStatistics.sex == 'M' ? 'Benvenuto ' : 'Benvenuta ');

						profiloService.checkuserappointments(function (data) {
								if (data.valid && data.responseObject) {
									$rootScope.$broadcast('ultimo-appuntamento');
								}
								profiloService.retrieveuserlastaccess(function (data) {
									if (data.valid && data.responseObject) {
										$rootScope.lastLogin = data.responseObject;
									}

									if (typeof myposte_config !== 'undefined' && myposte_config.showNewHeader) {
										// cpit - get alert message.
										profiloService.getalertmessage(function (data) {
											if (data && data.responseObject && data.responseObject.message) {
												var alertMessage = data.responseObject.message;
												SessionStorageService.set('alertMessage', alertMessage);
												$rootScope.alertMessage = alertMessage;
												dcsMultiTrackService.trackAlertMessage(alertMessage);
											}
											else if(!data.valid){
												var errors = data.errors;
												for(var i=0; i<=errors.length; i++){
													if(errors[i].message == 'user_filtered'){
														$rootScope.alertMessageUserFiltered = true;
														break;
													}
												}
											}
											if (!$rootScope.briefProfile) {
												profiloService.getbriefprofile(function (data) {
													if (data && data.responseObject && data.responseObject.briefProfile) {
														var briefProfile = data.responseObject.briefProfile;
														SessionStorageService.set('briefProfile', briefProfile);
														$rootScope.briefProfile = briefProfile;
														dcsMultiTrackService.trackCruscotto(briefProfile);
													}
													loadBiscotti();

												}, function (err) {
													$rootScope.serverErrorSingolo = true;
													$rootScope.serverError = errorMessages.dataUnavaiable.message;
													$rootScope.$broadcast('myposte-forged');
													$rootScope.myposteForged = true;
												});
											}
											else {
												loadBiscotti();
											}

											$rootScope.showNewHeader = true;

										}, function (err) {
											$rootScope.serverErrorSingolo = true;
											$rootScope.serverError = errorMessages.dataUnavaiable.message;
											$rootScope.$broadcast('myposte-forged');
											$rootScope.myposteForged = true;
										});

									}
									else {
										profiloService.getprofileimage(function (data) {
										if (data.valid && data.responseObject.format && data.responseObject.fileData) {
											$rootScope.avatar = "data:" + data.responseObject.format + ";base64," + data.responseObject.fileData;
										}
										loadBiscotti();

									}, function (err) {
										$rootScope.serverErrorSingolo = true;
										$rootScope.serverError = errorMessages.dataUnavaiable.message;
										$rootScope.$broadcast('myposte-forged');
										$rootScope.myposteForged = true;
									});
									}
									
								}, function (err) {
									$rootScope.serverErrorSingolo = true;
									$rootScope.serverError = errorMessages.dataUnavaiable.message;
									$rootScope.$broadcast('myposte-forged');
									$rootScope.myposteForged = true;
								});
							}, function (err) {
								$rootScope.serverErrorSingolo = true;
								$rootScope.serverError = errorMessages.dataUnavaiable.message;
								$rootScope.$broadcast('myposte-forged');
								$rootScope.myposteForged = true;
							});
					}, function (err) {
						$rootScope.serverErrorSingolo = true;
						$rootScope.serverError = errorMessages.dataUnavaiable.message;
						$rootScope.$broadcast('myposte-forged');
						$rootScope.myposteForged = true;
					}), 50);
				})
//			});
		}

		var loadOffering = function() {
			$rootScope.offering = {
				activeOfferingCount : 0,
				totalOfferingCount : 0
			};
			$rootScope.isInv = false;
			$rootScope.isRisp = false;
			loadOfferingInv();
			loadOfferingRisp();
			if (config.offeringInsuranceEnabled) { loadOfferingInsurance(); } 
		};

		var loadOfferingInv = function() {
			profiloService.getremoteofferingcountInv(function(data) {
				if(data.valid) {
					var totalOfferingActiveInSession = setAndReturnValueOfCookie('offeringInv_'+$rootScope.userClaims.userid, data.responseObject.totalOfferingCount);
					$rootScope.isInv = data.responseObject.totalOfferingCount > totalOfferingActiveInSession && data.responseObject.activeOfferingCount > 0;
					$rootScope.offering.activeOfferingCount += data.responseObject.activeOfferingCount;
					$rootScope.offering.totalOfferingCount += data.responseObject.totalOfferingCount;
				}
			});
		};

		var loadOfferingRisp = function() {
			profiloService.getremoteofferingcountRisp(function(data) {
				if(data.valid) {
					var totalOfferingActiveInSession = setAndReturnValueOfCookie('offeringRisp_'+$rootScope.userClaims.userid, data.responseObject.totalOfferingCount);
					$rootScope.isRisp = data.responseObject.totalOfferingCount > totalOfferingActiveInSession && data.responseObject.activeOfferingCount > 0;
					$rootScope.offering.activeOfferingCount += data.responseObject.activeOfferingCount;
					$rootScope.offering.totalOfferingCount += data.responseObject.totalOfferingCount;
				}
			});
		};

		var loadOfferingInsurance = function() {
			restService.search('ar-proposal-data').then(function(response){
				if(response.data && response.data.results) {
					var totalOfferingInsurance = 0;
					response.data.results.forEach( function(product){
						if (product.data && product.data['ar-proposal-data'] && product.data['ar-proposal-data'].inReservedArea) { totalOfferingInsurance++; }
					});
					$rootScope.offering.activeOfferingCount += totalOfferingInsurance;
					$rootScope.offering.totalOfferingCount += totalOfferingInsurance;
				}
			}, 
			function(error){
				console.log("errore ar-proposal-data",error);
			});
		}

		var setAndReturnValueOfCookie = function(nameCookie, data) {
			var value = 0;
			var now = new Date();
			var exp = new Date(now.getFullYear()+1, now.getMonth(), now.getDate());
			var cookie = $cookies.get(nameCookie);
			if (cookie) {
				value = cookie;
			}
			$cookies.put(nameCookie, data, { expires: exp });
			return value;
		};

		$rootScope.getOfferingMessage = function() {

			if($rootScope.isInv && $rootScope.isRisp) {
				return config.offering_message;
			}
			if($rootScope.isInv) {
				return config.offering_message_inv;
			}
			if($rootScope.isRisp) {
				return config.offering_message_risp;
			}

		}

		$rootScope.bachecaContorno = function () {
			//Inizializzazione Bacheca services
			bachecaService.infoContextNoLoading({ context: 'poste' }, function (data) {
				$rootScope.unreadMessageCount = data.returnedObject.unreadMessageCount;

				bachecaService.searchNoLoading({
					context: "poste",
					criteria: {
						startDate: "", // "01/01/2010",
						stopDate: "", //moment(new Date()).format('DD/MM/YYYY'),
						service: "",
						category: "",
						subject: ""
					},
					paged: {
						page: "1",
						sort: "data",
						order: "DESC",
						pageSize: config.sizeForPage
					}
				}, function (data) {
					$rootScope.lastMessages = data.returnedObject.list;
					stickySpallaDestra();
				}, function () {
					console.log("servizio search non disponibile");
				});

			}, function () {
				console.log("servizio infoContext non disponibile");
			});
		}

	});

app.directive('compile', ['$compile', function ($compile) {
	return function (scope, element, attrs) {
		scope.$watch(
			function (scope) {
				// watch the 'compile' expression for changes
				return scope.$eval(attrs.compile);
			},
			function (value) {
				// when the 'compile' expression changes
				// assign it into the current DOM
				element.html(value);

				// compile the new DOM and link it to the current
				// scope.
				// NOTE: we only compile .childNodes so that
				// we don't get into infinite loop compiling ourselves
				$compile(element.contents())(scope);
			}
		);
	};
}])

