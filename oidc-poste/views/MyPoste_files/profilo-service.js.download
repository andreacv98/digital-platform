


    app.service('profileInterceptor', function ($q, $location, $rootScope, errorMessages) {  //TODO: , error_messages
        var service = this;

        service.request = function (request) {
        	return request;
        };

        service.response = function (response) {
        	$rootScope.responseSuccess = false;
        	$rootScope.serverError = false;
        	$rootScope.serverErrorSingolo = false;
			$rootScope.serverErrorMultiplo = false;
        	$rootScope.successMessage = "";
        	$rootScope.backRef = false;
        	$rootScope.modificaIndirizzi = false;
        	
        	if(response.status == 200 && response.data.valid){
        		$rootScope.responseSuccess = response.data.valid;
        		if (response.config.url.indexOf('saveprivacy') > 0) {
        			$rootScope.successMessage = "Operazione effettuata con successo. La modifica richiede alcuni minuti per essere effettiva, nel frattempo potresti vedere ancora i vecchi valori";
        		}
        		else{
        			$rootScope.successMessage = "Operazione effettuata con successo";
        			if($rootScope.rootisuserlock){
        				$rootScope.successMessage += "I tuoi dati personali sono in corso di aggiornamento. <br/> Dovrai attendere che questa operazione sia completata per poter richiedere ulteriori modifiche";
        			}
        		}
        		document.body.scrollTop = document.documentElement.scrollTop = document.getElementById('accessibility-anchor').offsetTop - 60;
            }
        	
        	else if(!response.data.valid && response.data.errors){
    			$rootScope.serverError = '';
    			$rootScope.serverErrorSingolo = true;
				$rootScope.serverErrorMultiplo = false;

    			var i = 0;
    			angular.forEach(response.data.errors, function(value, key){

					if ((value.message === 'normalization_error' || value.message === 'normalization_ambiguous')
						 && ((value.name === 'domicile' && $rootScope.domicilioCustom) || (value.name === 'delivery' && $rootScope.recapitoCustom)))
					{  
						//continue;
					}
					else{
						if(i==1){
							$rootScope.serverError = '<li>'+$rootScope.serverError + '</li>';
						}
						if(errorMessages[value.name]){
	    					$rootScope.serverError = $rootScope.serverError + (i>0?'<li>':'')+errorMessages[value.name].name + ' ' + (errorMessages[value.name].errorMessages[value.message]?errorMessages[value.name].errorMessages[value.message].message:value.message) ;
	    					
	    					if(value.parameters && value.parameters.length){
	    						$rootScope.serverError = $rootScope.serverError + '<ul>';
	    						
	    						angular.forEach(value.parameters, function(value2, key2){
	    							$rootScope.serverError = $rootScope.serverError + '<li>' + (errorMessages[value.name].errorMessages[value.message].parameters[value2]?errorMessages[value.name].errorMessages[value.message].parameters[value2]:'') + '</li>';
	    						});
	    						$rootScope.serverError = $rootScope.serverError + '</ul>';
	    						
	    					}
	    					
	    					$rootScope.serverError = $rootScope.serverError + (i>0?'</li>':'');
	    				}
	    				else{
	    					$rootScope.serverError = $rootScope.serverError + (i>0?'<li>':'') + value.message + (i>0?'</li>':'');
	    				}
	    				
	    				i++;
					}
    				
    			});
    			if(i>1){
    				$rootScope.serverError = '<ul>'+$rootScope.serverError + '</ul>';
    				$rootScope.serverErrorSingolo = false;
    				$rootScope.serverErrorMultiplo = true;
    			}
    			
    			document.body.scrollTop = document.documentElement.scrollTop = document.getElementById('accessibility-anchor').offsetTop - 60;
        	}
        	
        	
            return response.data;
        };

        service.responseError = function (response) {
        	$rootScope.serverError = errorMessages.serverError.message;
        	document.body.scrollTop = document.documentElement.scrollTop = document.getElementById('accessibility-anchor').offsetTop - 60;
            return $q.reject(response);
        };
  })
    
    
    .factory('profiloService', ['$http', '$q', '$resource', 'config','profileInterceptor', function ($http, $q, $resource, config, profileInterceptor) {

    return $resource(config.profilo_ws_url + ':context/:action/:method', {},
        {
            forge: {
                params: { context: 'authorization', action: 'forge', nocache: function(){return new Date().getTime()}},
                method: 'GET'
            },
            getprivacy: {
                params: { context: 'retail', action: 'getprivacy', nocache: function(){return new Date().getTime()}},
                method: 'POST',
                headers: {'Content-Type': 'application/json;charset=UTF-8'}
            },
            changepassword: {
                params : {context: 'retail', action: 'changepassword', nocache: function(){return new Date().getTime()}},
                method: 'POST',
                headers: {'Content-Type': 'application/json;charset=UTF-8'}, interceptor : profileInterceptor   
            },
            getsecureddevices: {
                params : {context: 'retail', action: 'getsecureddevices', nocache: function(){return new Date().getTime()}},
                method: 'GET'   
            },
            suspenddevice: {
                params : {context: 'retail', action: 'suspenddevice', nocache: function(){return new Date().getTime()}},
                method: 'POST',
                headers: {'Content-Type': 'application/json;charset=UTF-8'}   , interceptor : profileInterceptor
            },
            newaliasmail: {
                params : {context: 'retail', action: 'newaliasmail', nocache: function(){return new Date().getTime()}},
                method: 'POST',
                headers: {'Content-Type': 'application/json;charset=UTF-8'}, interceptor : profileInterceptor
            },
            saveprivacy: {
                params : {context: 'retail', action: 'saveprivacy', nocache: function(){return new Date().getTime()}},
                method: 'POST',
                headers: {'Content-Type': 'application/json;charset=UTF-8'}, interceptor : profileInterceptor
            },
            modifycontacts: {
                params : {context: 'retail', action: 'modifycontacts', nocache: function(){return new Date().getTime()}},
                method: 'POST',
                headers: {'Content-Type': 'application/json;charset=UTF-8'}, interceptor : profileInterceptor
            },
            modifyaddresses: {
                params : {context: 'retail', action: 'modifyaddresses', nocache: function(){return new Date().getTime()}},
                method: 'POST',
                headers: {'Content-Type': 'application/json;charset=UTF-8'}, interceptor : profileInterceptor
            },
            getfullvitalstatistics: {
                params: {context: 'retail', action: 'getfullvitalstatistics', nocache: function(){return new Date().getTime()}},
                method: 'GET'
            },
            getvitalstatistics: {
                params: {context: 'retail', action: 'getvitalstatistics', nocache: function(){return new Date().getTime()}},
                method: 'GET'
            },
            getusereducationalqualification : {
                params: {context: 'retail', action: 'getusereducationalqualification', nocache: function(){return new Date().getTime()}},
                method: 'GET'
            },
            getuseroccupation : {
                params: {context: 'retail', action: 'getuseroccupation', nocache: function(){return new Date().getTime()}},
                method: 'GET'
            },
            
            getprofileimage: {
                params: {context: 'retail', action: 'getprofileimage', nocache: function(){return new Date().getTime()}},
                method: 'GET'
            },
            setprofileimage: {
                params: {context: 'retail', action: 'setprofileimage', nocache: function(){return new Date().getTime()}},
                method: 'POST',
                headers: {'Content-Type': 'application/json;charset=UTF-8'}, 
                interceptor : profileInterceptor
            },
            removeprofileimage: {
                params: {context: 'retail', action: 'removeprofileimage', nocache: function(){return new Date().getTime()}},
                method: 'POST',
                headers: {'Content-Type': 'application/json;charset=UTF-8'}, 
                interceptor : profileInterceptor
            },
            getfavouriteservices: {
                params: {context: 'retail', action: 'getfavouriteservices', nocache: function(){return new Date().getTime()}},
                method: 'GET'
            },
            modifyfavouriteservices: {
                params: {context: 'retail', action: 'modifyfavouriteservices', nocache: function(){return new Date().getTime()}},
                method: 'POST',
                headers: {'Content-Type': 'application/json;charset=UTF-8'}, 
                interceptor : profileInterceptor
            },
            getaliasmail: {
                params: {context: 'retail', action: 'getaliasmail', nocache: function(){return new Date().getTime()}},
                method: 'GET'
            },
            modifyusereducationalqualification: {
                params: {context: 'retail', action: 'modifyusereducationalqualification', nocache: function(){return new Date().getTime()}},
                method: 'POST',
                headers: {'Content-Type': 'application/json;charset=UTF-8'}, 
                interceptor : profileInterceptor
            },
            modifyuseroccupation: {
                params: {context: 'retail', action: 'modifyuseroccupation', nocache: function(){return new Date().getTime()}},
                method: 'POST',
                headers: {'Content-Type': 'application/json;charset=UTF-8'}, 
                interceptor : profileInterceptor
            },
            isuserlock: {
                params: {context: 'retail', action: 'isuserlock', nocache: function(){return new Date().getTime()}},
                method: 'GET'
            },
            checkuserappointments: {
                params: {context: 'retail', action: 'checkuserappointments', nocache: function(){return new Date().getTime()}},
                method: 'GET'
            },
            retrieveuserlastaccess: {
                params: {context: 'retail', action: 'retrieveuserlastaccess', nocache: function(){return new Date().getTime()}},
                method: 'GET'
            },
            getinfouserprivate: {
                params: {context: 'retail', action: 'getinfouserprivate', nocache: function(){return new Date().getTime()}},
                method: 'GET'
            },
            fromposteid: {
            	params: {context: 'retail', action: 'fromposteid', nocache: function(){return new Date().getTime()}},
                method: 'POST',
                headers: {'Content-Type': 'application/json;charset=UTF-8'}
            },
            getuserroles: {
            	params: {context: 'retail', action: 'getuserroles', nocache: function(){return new Date().getTime()}},
                method: 'POST',
                headers: {'Content-Type': 'application/json;charset=UTF-8'}
            },
            getremoteofferingcountInv: {
              params: {context: 'basicretail', action: 'getremoteofferingcount', method:'INV_MIFID', nocache: function(){return new Date().getTime()}},
              method: 'GET',
              headers: {'Content-Type': 'application/json;charset=UTF-8'}
            },
            getremoteofferingcountRisp: {
              params: {context: 'basicretail', action: 'getremoteofferingcount', method:'RISP_P', nocache: function(){return new Date().getTime()}},
              method: 'GET',
              headers: {'Content-Type': 'application/json;charset=UTF-8'}
            },
            possesso: {
            	params: {context: 'retail', action: 'getuserproducts', nocache: function(){return new Date().getTime()}},
                method: 'GET'
	        },
            retrievedetailedaccountlist: {
                params: { context: 'retail', action: 'retrievedetailedaccountlist' },
                method: 'GET'
            },
          // cpit - Get profile messages to show for user.
          getalertmessage: {
            params: {context: 'retail', action: 'getalertmessage', nocache: function(){return new Date().getTime()}},
            method: 'GET',
            headers: {'Content-Type': 'application/json;charset=UTF-8'}
          },
          // cpit - Get profile details.
          getbriefprofile: {
            params: {context: 'retail', action: 'getbriefprofile', nocache: function(){return new Date().getTime()}},
            method: 'GET',
            headers: {'Content-Type': 'application/json;charset=UTF-8'}
          }
        });
}])
    // TODO SISTEMARE QUANDO SI LAVORA SU ID PRIVATA - SOPRATTUTTO LA URL SCHIANTATA CHE VA IN CONF
.factory('typologiesService', ['$http', '$q', '$resource', 'config','profileInterceptor', function ($http, $q, $resource, config, profileInterceptor) {

    return $resource(config.typologies_url, {},
        {
	    	nations : {
	            params: {action: 'nations', nocache: function(){return new Date().getTime()}},
	            method: 'GET'
	        },
	        italiannations: {
	            params: {action: 'italiannations', nocache: function(){return new Date().getTime()}},
	            method: 'GET'
	        },
	        foreignnations: {
	            params: {action: 'foreignnations', nocache: function(){return new Date().getTime()}},
	            method: 'GET'
	        },
	        provinces : {
	            params: {action: 'provinces', nocache: function(){return new Date().getTime()}},
	            method: 'POST',
	            headers: {'Content-Type': 'application/json;charset=UTF-8'}     
	        },
	        towns : {
	            params: {action: 'towns', nocache: function(){return new Date().getTime()}},
	            method: 'POST',
	            headers: {'Content-Type': 'application/json;charset=UTF-8', 'X-NO-LOADING': true}
	        },
	        occupations: {
	            params: {action: 'occupations', nocache: function(){return new Date().getTime()}},
	            method: 'GET'
	        },
	        educationalqualifications: {
	            params: {action: 'educationalqualifications', nocache: function(){return new Date().getTime()}},
	            method: 'GET'
	        }
        });
}]);    
    
    
    

