


app.controller('ProfiloCambiaPasswordController', ['$scope', 'profiloService', 'mockProfiloService', 'viewModelService', function ($scope, profiloService, mockProfiloService, viewModelService) {
	$scope.status = true;
	$scope.statusCP = true;
	$scope.inputType = 'password';
	$scope.inputTypeCP = 'password';
	
	$scope.passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[`~!@#\$%\^\&*()_\-\+=\{\}\[\]\\|:;"'\<\>,\.\?\/])(?!.*([a-zA-Z0-9]+)\1{2,})[a-zA-Z0-9`~!@#\$%\^\&*()_\-\+=\{\}\[\]\\|:;"'\<\>,\.\?\/]{8,16}$/;
//	$scope.passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?!.*([a-zA-Z0-9]+)\1{2,})[a-zA-Z\d]{8,16}$/;
	$scope.checkPassword = function (test) {
        /*
         1:Lunghezza minima di 8 caratteri massima di 16 caratteri
         2:Uso di caratteri maiuscoli e minuscoli
         3:Inclusione di uno o più caratteri numerici
         4:Non deve contenere più di due caratterzi identici consecutivi 
         5:Deve (non deve) contenere caratteri speciali
        */
        pwd = $scope.form.password.$viewValue;

        if (!pwd)
            return false;

        switch (test) {
            case 1:
                return pwd.length <= 16 && pwd.length >= 8;
                break;
            case 2:
                return /(?=.*[a-z])(?=.*[A-Z])/.test(pwd);
                break;
            case 3:
                return /.*[0-9].*/.test(pwd);
                break;
            case 4:
                return !/([a-zA-Z0-9]+)\1{2,}/.test(pwd);
                break;
            case 5:
            	return /.*[`~!@#\$%\^\&*()_\-\+=\{\}\[\]\\|:;"'\<\>,\.\?\/].*/.test(pwd);
            	// return !/\W|\s/.test(pwd);
                break;
            default:
                return false;
        }
    };

    $scope.complessitaPWD = function (password) {
        //console.info(password);
        //console.info("scope.user.password:"+$scope.user.password);

        if (password != null && password != undefined) {
            if ((password.length > 7) && (password.length < 12)) {
                $scope.statusComplex = 2;
            }
            if ((password.length > 11) && (password.length < 15)) {
                $scope.statusComplex = 3;
            }
            if (password.length > 14) {
                $scope.statusComplex = 4;
            }
        } else {
            $scope.statusComplex = 1;
        }
    };
    
    $scope.changeStatus = function(){
        $scope.status = !$scope.status;
        if ($scope.inputType == 'password')
            $scope.inputType = 'text';
        else
            $scope.inputType = 'password';
    };
    
    $scope.changeStatusCP = function(){
        $scope.statusCP = !$scope.statusCP;
        if ($scope.inputTypeCP == 'password')
            $scope.inputTypeCP = 'text';
        else
            $scope.inputTypeCP = 'password';
    };
    
    $scope.changePassword = function () {

        profiloService.changepassword($scope.Model.profilo.passwordProfilo, function(data){
            if(!data.valid){
            	console.log($scope.form);
				angular.forEach(data.errors, function(value, key){
					if($scope.form[value.name]){
						$scope.form[value.name].$setValidity("serverError", false);
					}
				});
			}
        });
        /*mockProfiloService.changePassword($scope.Model.profilo.passwordProfilo, function (data) {
            console.log(data);
            mockProfiloService.getPassword(function (data) {
                $scope.passwordSuccessfullyChanged = true;
                $scope.showChangePasswordForm = false;
                $scope.Model.passwordProfilo.password = data;
                $timeout(function () {
                    $scope.passwordSuccessfullyChanged = false;
                }, 3000);
            });

        }, function (err) {
            $scope.oldPasswordWrong = true;
            $timeout(function () {
                $scope.oldPasswordWrong = false;
            }, 3000);

        });*/

    };
    
    $scope.$parent.$parent.$watch("Model.profilo.passwordProfilo", function(newValue, oldValue){
		if($scope.form.$error.serverError){
	    	
			serverError = angular.copy($scope.form.$error.serverError);
			
	    	angular.forEach(serverError, function(value, key){
				value.$setValidity("serverError", true);
			});
    	}
    }, true);
}]);
